from Crypto.Util.number import bytes_to_long, long_to_bytes
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto.Util.Padding import pad, unpad

# Public Prime Base
g = 23368527044039353135315273273704702967327948673287606560235193074789847524541031496179655110528623707549185507311537639339431263085425226310209274511796065394278834003188591728220072338551851373222495290595089451294001469531283741936104756445252665456026215717262958642980299407011388867002210159594496900177135229783078249658384435558199031269758438329952880008995122919640264848867840128793969476512848190164808267620419479361428977876744593560940751318733167049233469164113787375469627473083021627011201248661966884665094915401695814292669879422531291105012600361361860174586160560731851478899762821583432390160941

# Public Prime Modulus
p = 29194902067206078448430945335624586144033130401081041245115886907127750672139214874029056898566487409483037728122274229302151313428279311970715120523637208395195123702460759048651140608891861365329674380042505839098404822882804169256972943463713792145086554691030689586829715213038254507099896208420026673092296675898399847404447055974109933401599368211691466659739561593603532623283572097522321908718878776464650119238079097690836663426944956204090423915159982874495358756454745761922872836298331755996226072249296559669022016399637421219176744329562640656641583518784135412274813064033245533537345554339693211946419

# Bob's Public Key
g_b = 27147869126710816933123550600475969557856727371271575806737174812422544257064516870708386727939379661549604987381164981180211422034746955494728522659754321749307503607506232163533809302463237595650902571863912972712315696192363910852056319439048667236426320009987259159060300274350346915763977556391759653237733123788431035122781403955932479977229836134705651061706250630193263957855804404268102804879167242744305236659320922303809111739342304190394225276316485596432189068056143652043934088050667530979379768579460177918306681963754011146729513849604511820999206664855548893515759576885546599653387264690051830993021

# Your private key
a = 32084544683719029835461379185276818635081295359290410287155088363766408730029558921331472639393366637977515642808506215543229854984576980046844606471496576402438511935300410930282096819245868727224805355991350451258601238410027105197061336056905374831476700272263425148389784491746701108716183425150158275183366146882023762401403727602002006802829687311899038998974308093635050848047933550360879633782482341831726920501873501968183981292580764363140938847037379216753062492521623843890465004989529607051598105343195246531498349273399982753975348779791440831502171831118055138142730540313436648329832766971957618007661

# TODO: Properly calculate the shared key!

# Solution
shared_key_unhashed = pow(g_b, a, p)

h = SHA256.new(data = long_to_bytes(shared_key_unhashed))
shared_key = h.digest()

cipher = AES.new(shared_key, AES.MODE_CBC, iv=b"\x00"*16)

with open("encrypted_msg.bin", "rb") as f:
    data = f.read()

print(unpad(cipher.decrypt(data), 256).decode())
